[project]
name = "mpt-extension-sdk"
version = "4.1.1"
description = "Extensions SDK for SoftwareONE Marketplace Platform"
authors = [{ name = "SoftwareOne AG" }]
requires-python = ">=3.12,<4"
readme = "README.md"
license = {text = "Apache-2.0 license"}
dependencies = [
    "azure-identity>=1.21.0,<2",
    "azure-keyvault-secrets>=4.9.0,<5",
    "azure-monitor-opentelemetry-exporter==1.0.0b25",
    "boto3==1.34.*",
    "click==8.1.*",
    "debugpy==1.8.*",
    "django==4.2.*",
    "django-ninja==1.1.*",
    "gunicorn==23.0.*",
    "jinja2==3.1.*",
    "markdown-it-py==3.0.*",
    "openpyxl==3.1.*",
    "opentelemetry-api==1.30.*",
    "opentelemetry-instrumentation-django==0.51b0",
    "opentelemetry-instrumentation-logging==0.51b0",
    "opentelemetry-instrumentation-requests==0.51b0",
    "opentelemetry-sdk==1.30.*",
    "phonenumbers==8.13.*",
    "pyairtable==2.3.*",
    "pyfiglet==1.0.*",
    "pyjwt==2.8.*",
    "pymsteams==0.2.*",
    "regex>=2024.7.24,<2025",
    "requests==2.32.*",
    "rich==13.7.*",
    "types-openpyxl==3.1.*",
    "typing-extensions==4.9.*",
    "watchfiles==0.21.*",
]

[project.scripts]
swoext = "mpt_extension_sdk.runtime.swoext:main"

[project.entry-points."swo.mpt.sdk"]
app_config = "mpt_extension_sdk.runtime.djapp.apps:ExtensionConfig"

[dependency-groups]
dev = [
    "freezegun==1.4.*",
    "ipdb==0.13.*",
    "ipython==8.*",
    "mypy==1.8.*",
    "poetry-plugin-sort==0.2.*",
    "pre-commit==3.6.*",
    "pytest==7.4.*",
    "pytest-cov==4.1.*",
    "pytest-deadfixtures==2.2.*",
    "pytest-django==4.7.*",
    "pytest-mock==3.12.*",
    "pytest-randomly==3.15.*",
    "pytest-xdist==3.5.*",
    "responses==0.24.*",
    "ruff==0.3.*",
    "types-openpyxl==3.1.*",
    "types-requests==2.31.*",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "."
addopts = "--cov=mpt_extension_sdk --cov-report=term-missing --cov-report=html --cov-report=xml"
DJANGO_SETTINGS_MODULE = "tests.django.settings"
log_cli = false
filterwarnings = [
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
]

[tool.coverage.run]
branch = true
relative_files = true
omit = [
  "security.py",
  "django.py",
  "swoext.py",
  "__init__.py",
]

[tool.ruff]
extend-exclude = [".vscode", ".devcontainer", "swo"]
output-format = "full"

[tool.ruff.lint]

select = [
    "E",  # w errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade,
    "PT",  # flake8-pytest-style
    "T10",  # flake8-pytest-style
]
ignore = [
    "PT004", # fixture '{name}' does not return anything, add leading underscore
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "C408",  # Unnecessary `dict()` call (rewrite as a literal)
    "T100",  # Import for `debugpy` found
]

[tool.ruff.lint.isort]
known-third-party = ["swo"]

[tool.ruff.lint.pycodestyle]
max-line-length = 100

[tool.mypy]
warn_no_return = false

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyfiglet.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gunicorn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pymsteams.*"
ignore_missing_imports = true

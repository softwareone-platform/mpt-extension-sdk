[tool.poetry]
name = "mpt-extension-sdk"
version = "4.1.1"
description = "Extensions SDK for SoftwareONE Marketplace Platform"
authors = ["SoftwareOne AG"]
readme = "README.md"
license = "Apache-2.0"

[project.scripts]
swosdk = "mpt_extension_sdk.runtime.swoext:main"

[tool.poetry.group.dev.dependencies]
freezegun = "1.4.*"
ipdb = "0.13.*"
ipython = "8.*"
mypy = "1.8.*"
poetry-plugin-sort = "0.2.*"
pre-commit = "3.6.*"
pytest = "7.4.*"
pytest-cov = "4.1.*"
pytest-deadfixtures = "2.2.*"
pytest-django = "4.7.*"
pytest-mock = "3.12.*"
pytest-randomly = "3.15.*"
pytest-xdist = "3.5.*"
responses = "0.24.*"
ruff = "0.3.*"
types-openpyxl = "3.1.*"
types-requests = "2.31.*"

[tool.poetry.scripts]
swosdk = 'mpt_extension_sdk.runtime.swoext:main'


[tool.poetry.plugins."swo.mpt.sdk"]
"app_config" = "mpt_extension_sdk.runtime.djapp.apps:ExtensionConfig"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.hatch.build]
include = [
  "mpt_extension_sdk/**"
]

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "."
addopts = "--cov=mpt_extension_sdk --cov-report=term-missing --cov-report=html --cov-report=xml"
DJANGO_SETTINGS_MODULE = "tests.django.settings"
log_cli = false
filterwarnings = [
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
]

[tool.coverage.run]
branch = true
relative_files = true
omit = [
  "security.py",
  "django.py",
  "swoext.py",
  "__init__.py",
]

[tool.ruff]
extend-exclude = [".vscode", ".devcontainer", "swo"]
output-format = "full"

[tool.ruff.lint]

select = [
    "E",  # w errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade,
    "PT",  # flake8-pytest-style
    "T10",  # flake8-pytest-style
]
ignore = [
    "PT004", # fixture '{name}' does not return anything, add leading underscore
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "C408",  # Unnecessary `dict()` call (rewrite as a literal)
    "T100",  # Import for `debugpy` found
]

[tool.ruff.lint.isort]
known-third-party = ["swo"]

[tool.ruff.lint.pycodestyle]
max-line-length = 100

[tool.mypy]
warn_no_return = false

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyfiglet.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gunicorn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pymsteams.*"
ignore_missing_imports = true

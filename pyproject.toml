[project]
name = "mpt-extension-sdk"
version = "4.1.1"
description = "Extensions SDK for SoftwareONE Marketplace Platform"
authors = [{ name = "SoftwareOne AG" }]
requires-python = ">=3.12,<4"
readme = "README.md"
license = {text = "Apache-2.0 license"}
dependencies = [
    "azure-identity>=1.21.0,<2",
    "azure-keyvault-secrets>=4.9.0,<5",
    "azure-monitor-opentelemetry-exporter==1.0.0b25",
    "click==8.1.*",
    "debugpy==1.8.*",
    "django==4.2.*",
    "django-ninja==1.1.*",
    "gunicorn==23.0.*",
    "jinja2==3.1.*",
    "markdown-it-py==3.0.*",
    "openpyxl==3.1.*",
    "opentelemetry-api==1.30.*",
    "opentelemetry-instrumentation-django==0.51b0",
    "opentelemetry-instrumentation-logging==0.51b0",
    "opentelemetry-instrumentation-requests==0.51b0",
    "opentelemetry-sdk==1.30.*",
    "phonenumbers==8.13.*",
    "pyairtable==2.3.*",
    "pyfiglet==1.0.*",
    "pyjwt==2.8.*",
    "pymsteams==0.2.*",
    "regex>=2024.7.24,<2025",
    "requests==2.32.*",
    "rich==13.7.*",
    "types-openpyxl==3.1.*",
    "typing-extensions==4.14.*",
    "watchfiles==0.21.*",
]

[project.scripts]
swoext = "mpt_extension_sdk.runtime.swoext:main"

[project.entry-points."swo.mpt.sdk"]
app_config = "mpt_extension_sdk.runtime.djapp.apps:ExtensionConfig"

[dependency-groups]
dev = [
    "flake8>=7.3.0",
    "freezegun==1.4.*",
    "ipdb==0.13.*",
    "ipython==8.*",
    "mypy==1.8.*",
    "pre-commit==3.6.*",
    "pytest==7.4.*",
    "pytest-cov==4.1.*",
    "pytest-deadfixtures==2.2.*",
    "pytest-django==4.7.*",
    "pytest-mock==3.12.*",
    "pytest-randomly==3.15.*",
    "pytest-xdist==3.5.*",
    "responses==0.24.*",
    "ruff==0.12.*",
    "types-openpyxl==3.1.*",
    "types-requests==2.31.*",
    "wemake-python-styleguide==1.3.*",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
  "mpt_extension_sdk/**"
]

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "."
addopts = "--cov=mpt_extension_sdk --cov-report=term-missing --cov-report=html --cov-report=xml"
DJANGO_SETTINGS_MODULE = "tests.django.settings"
log_cli = false
filterwarnings = [
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
]

[tool.coverage.run]
branch = true
relative_files = true
omit = [
  "django.py",
  "__init__.py",
]

[tool.ruff]
preview = true
target-version = "py312"
extend-exclude=[".vscode", ".devcontainer"]
output-format = "full"
line-length = 100

[tool.ruff.format]
quote-style = "double"
docstring-code-format = false

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "C90",  # maccabe
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle
    "ERA",  # flake8-eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FBT",  # flake8-boolean-trap
    "FLY",  # pyflint
    "FURB", # refurb
    "G",    # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff
    "S",    # flake8-bandit
    "SIM",  # flake8-simpify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T100", # flake8-debugger
    "TRY",  # tryceratops
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "YTT",  # flake8-2020
]
ignore = [
    "A005",   # allow to shadow stdlib and builtin module names
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "COM812", # trailing comma, conflicts with `ruff format`
    # Different doc rules that we don't really care about:
    "D100",
    "D104",
    "D105", # docstring for magic methods
    "D106",
    "D107",
    "D203",
    "D212",
    "D401",
    "D404",
    "D405",
    "ISC001",  # implicit string concat conflicts with `ruff format`
    "ISC003",  # prefer explicit string concat over implicit concat
    "PLR09",   # we have our own complexity rules
    "PLR2004", # do not report magic numbers
    "PLR6301", # do not require classmethod / staticmethod when self not used
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-import-conventions.banned-from = [ "ast", "datetime" ]
flake8-import-conventions.aliases = { datetime = "dt" }
flake8-quotes.inline-quotes = "double"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "D103", # missing docstring in public function
  "S101", # asserts
  "S105", # hardcoded passwords
  "S404", # subprocess calls are for tests
  "S603", # do not require `shell=True`
  "S607", # partial executable paths
]
"mpt_extension_sdk/swo_rql/query_builder.py" = [
  "PLW2901", # loop variable overwritten by assignment target
]

[tool.ruff.lint.isort]
known-third-party = ["swo"]

[tool.mypy]
warn_no_return = false

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyfiglet.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gunicorn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pymsteams.*"
ignore_missing_imports = true
